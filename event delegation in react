Let's explore event delegation in React using a form with multiple input fields. We'll see how you can handle events on these input fields efficiently by using a single event handler attached to a parent element.

### Example: Form with Multiple Inputs

Imagine you have a form with several input fields, and you want to handle the `onChange` event for all these inputs using event delegation.

```jsx
import React, { useState } from 'react';

function Form() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    age: '',
  });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  return (
    <form onChange={handleChange}>
      <label>
        Name:
        <input type="text" name="name" value={formData.name} />
      </label>
      <br />
      <label>
        Email:
        <input type="email" name="email" value={formData.email} />
      </label>
      <br />
      <label>
        Age:
        <input type="number" name="age" value={formData.age} />
      </label>
    </form>
  );
}

export default Form;
```

### How It Works

1. **Single Event Handler:**
   - The `onChange` event is attached to the `form` element instead of each individual `input`.
   - When any input field's value changes, the event bubbles up to the `form`, and the `handleChange` function is called.

2. **Identifying the Target:**
   - Inside the `handleChange` function, `event.target` refers to the input field that triggered the event.
   - The `name` and `value` properties of `event.target` are used to update the `formData` state.

3. **Updating State:**
   - The `formData` state is updated based on the `name` attribute of the input field that was changed. This allows you to manage the state of the entire form with a single event handler.

### Benefits of This Approach

- **Efficiency:**  
  You don’t need to write separate `onChange` handlers for each input field. A single handler manages all the input fields.

- **Scalability:**  
  If you add more input fields to the form, the same event handler will handle their changes without additional code.

### Handling Dynamic Input Fields

If your form needs to handle a dynamic number of input fields (e.g., generated from an array), the same approach works seamlessly:

```jsx
import React, { useState } from 'react';

function DynamicForm() {
  const [fields, setFields] = useState([
    { id: 1, name: 'name', value: '' },
    { id: 2, name: 'email', value: '' },
    { id: 3, name: 'age', value: '' },
  ]);

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFields(fields.map(field =>
      field.name === name ? { ...field, value } : field
    ));
  };

  return (
    <form onChange={handleChange}>
      {fields.map(field => (
        <label key={field.id}>
          {field.name.charAt(0).toUpperCase() + field.name.slice(1)}:
          <input type="text" name={field.name} value={field.value} />
        </label>
      ))}
    </form>
  );
}

export default DynamicForm;
```

- **Dynamic Fields:**  
  The `fields` state holds an array of input fields, and `handleChange` updates the appropriate field based on its `name`.

- **Flexibility:**  
  You can easily add or remove fields from the `fields` array, and the form will adapt without needing additional event handlers.

### Key Points

- **React’s Synthetic Events:**  
  Even though React manages event delegation for you, attaching the event listener at a higher level (like a `form`) makes your code more organized and efficient.

- **State Management:**  
  The `handleChange` function ensures that the state of the form is updated correctly, using `event.target.name` to identify which input field was changed.

This approach to event delegation in React makes handling multiple form inputs simple, efficient, and scalable, allowing you to maintain clean and manageable code.