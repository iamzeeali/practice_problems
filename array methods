Here are code examples for each of the specified JavaScript array methods:

1. ** `at()` **: Returns the element at a specified index in an array, supporting negative indices for counting from the end.
   ```javascript
   const arr = [10, 20, 30, 40];
   console.log(arr.at(1));    // Output: 20
   console.log(arr.at(-1));   // Output: 40
   ```

2. ** `concat()` **: Merges two or more arrays into a new array.
   ```javascript
   const arr1 = [1, 2];
   const arr2 = [3, 4];
   const merged = arr1.concat(arr2);
   console.log(merged);    // Output: [1, 2, 3, 4]
   ```

3. ** `copyWithin()` **: Shallow copies part of an array to another location in the same array without changing its size.
   ```javascript
   const arr = [1, 2, 3, 4, 5];
   arr.copyWithin(0, 3);
   console.log(arr);    // Output: [4, 5, 3, 4, 5]
   ```

4. ** `entries()` **: Returns an iterator of key / value pairs for each index in the array.
   ```javascript
   const arr = ['a', 'b', 'c'];
   const iterator = arr.entries();
   for (const [index, element] of iterator) {
       console.log(index, element);
   }
   // Output:
   // 0 'a'
   // 1 'b'
   // 2 'c'
   ```

5. ** `every()` **: Tests if all elements in the array pass a provided function's test.
    ```javascript
   const arr = [2, 4, 6];
   const allEven = arr.every(num => num % 2 === 0);
   console.log(allEven);   // Output: true
   ```

6. ** `fill()` **: Fills all or part of an array with a static value.
   ```javascript
   const arr = [1, 2, 3, 4];
   arr.fill(0, 1, 3);
   console.log(arr);    // Output: [1, 0, 0, 4]
   ```

7. ** `filter()` **: Creates a new array with all elements that pass a provided function's test.
    ```javascript
   const arr = [1, 2, 3, 4];
   const filtered = arr.filter(num => num > 2);
   console.log(filtered);   // Output: [3, 4]
   ```

8. ** `find()` **: Returns the first element in the array that satisfies a provided testing function.
```javascript
   const arr = [1, 2, 3, 4];
   const found = arr.find(num => num > 2);
   console.log(found);   // Output: 3
   ```

9. ** `findIndex()` **: Returns the index of the first element that satisfies a provided testing function.
```javascript
   const arr = [1, 2, 3, 4];
   const index = arr.findIndex(num => num > 2);
   console.log(index);   // Output: 2
   ```

10. ** `findLast()` **: Returns the last element in the array that satisfies a provided testing function.
```javascript
    const arr = [1, 2, 3, 4];
    const last = arr.findLast(num => num > 2);
    console.log(last);   // Output: 4
    ```

11. ** `findLastIndex()` **: Returns the index of the last element that satisfies a provided testing function.
```javascript
    const arr = [1, 2, 3, 4];
    const lastIndex = arr.findLastIndex(num => num > 2);
    console.log(lastIndex);   // Output: 3
    ```

12. ** `flat()` **: Creates a new array with all sub - array elements concatenated into it recursively up to a specified depth.
    ```javascript
    const arr = [1, [2, [3, 4]], 5];
    const flatArr = arr.flat(2);
    console.log(flatArr);   // Output: [1, 2, 3, 4, 5]
    ```

13. ** `flatMap()` **: Maps each element using a mapping function and then flattens the result into a new array.
    ```javascript
    const arr = [1, 2, 3];
    const flatMapped = arr.flatMap(num => [num, num * 2]);
    console.log(flatMapped);   // Output: [1, 2, 2, 4, 3, 6]
    ```

14. ** `forEach()` **: Executes a provided function once for each array element.
    ```javascript
    const arr = [1, 2, 3];
    arr.forEach(num => console.log(num));
    // Output:
    // 1
    // 2
    // 3
    ```

15. ** `from()` **: Creates a new array instance from an array - like or iterable object.
    ```javascript
    const str = "hello";
    const arr = Array.from(str);
    console.log(arr);   // Output: ['h', 'e', 'l', 'l', 'o']
    ```

16. ** `group()` **: Groups the elements of an array based on the return value of a provided function.
```javascript
    const arr = [6.1, 4.2, 6.3];
    const grouped = arr.group(Math.floor);
    console.log(grouped);
    // Output: { '4': [ 4.2 ], '6': [ 6.1, 6.3 ] }
    ```

17. ** `groupToMap()` **: Groups the elements of an array into a `Map` based on the return value of a provided function.
```javascript
    const arr = [6.1, 4.2, 6.3];
    const groupedMap = arr.groupToMap(Math.floor);
    console.log(groupedMap);
    // Output: Map(2) { 4 => [ 4.2 ], 6 => [ 6.1, 6.3 ] }
    ```

18. ** `includes()` **: Determines whether an array contains a specified element.
    ```javascript
    const arr = [1, 2, 3];
    console.log(arr.includes(2));   // Output: true
    console.log(arr.includes(4));   // Output: false
    ```

19. ** `indexOf()` **: Returns the first index at which a specified element is found, or - 1 if not found.
    ```javascript
    const arr = [1, 2, 3, 2];
    console.log(arr.indexOf(2));   // Output: 1
    console.log(arr.indexOf(4));   // Output: -1
    ```

20. ** `isArray()` **: Determines whether a value is an array.
    ```javascript
    console.log(Array.isArray([1, 2, 3]));   // Output: true
    console.log(Array.isArray("hello"));     // Output: false
    ```

21. ** `join()` **: Joins all elements of an array into a string, with a specified separator.
    ```javascript
    const arr = [1, 2, 3];
    const str = arr.join("-");
    console.log(str);   // Output: '1-2-3'
    ```

22. ** `keys()` **: Returns an iterator containing the keys(indexes) for each element in the array.
    ```javascript
    const arr = ['a', 'b', 'c'];
    const keysIterator = arr.keys();
    for (const key of keysIterator) {
        console.log(key);
    }
    // Output:
    // 0
    // 1
    // 2
    ```

23. ** `lastIndexOf()` **: Returns the last index at which a specified element is found, or - 1 if not found.
    ```javascript
    const arr = [1, 2, 3, 2];
    console.log(arr.lastIndexOf(2));   // Output: 3
    console.log(arr.lastIndexOf(4));   // Output: -1
    ```

24. ** `map()` **: Creates a new array with the results of calling a provided function on every element.
    ```javascript
    const arr = [1, 2, 3];
    const doubled = arr.map(num => num * 2);
    console.log(doubled);   // Output: [2, 4, 6]
    ```

25. ** `of()` **: Creates a new array with a variable number of arguments, regardless of number or type.
    ```javascript
    const arr = Array.of(1, 2, 3, 'a', 'b');
    console.log(arr);   // Output: [1, 2, 3, 'a', 'b']
    ```

26. ** `pop()` **: Removes and returns the last element from an array.
    ```javascript
    const arr = [1, 2, 3];
    const last = arr.pop();
    console.log(last);   // Output: 3
    console.log(arr);    // Output: [1, 2]
    ```

27. ** `push()` **: Adds one or more elements to the end of an array and returns the new length.
    ```javascript
    const arr = [1, 2];
    const newLength = arr.push(3, 4);
    console.log(newLength);   // Output: 4
    console.log(arr);         // Output: [1, 2, 3, 4]
    ```

28. ** `reduce()` **: Applies a function against an accumulator and each element to reduce the array to a single value.
    ```javascript
    const arr = [1, 2, 3, 4];
    const sum = arr.reduce((acc, curr) => acc + curr, 0);
    console.log(sum);   // Output: 10
    ```

29. ** `reduceRight()` **: Applies a function against an accumulator and each element from right to left to reduce the array to a single value.
    ```javascript
    const arr = [1, 2, 3, 4];
    const sum = arr.reduceRight((acc, curr) => acc + curr, 0);
    console.log(sum);   // Output: 10
    ```

30. ** `reverse()` **: Reverses the order of elements in an array in place.
    ```javascript
    const arr = [1, 2, 3];
    arr.reverse();
    console.log(arr);   // Output: [3, 2, 1]
    ```

31. ** `shift()` **: Removes and returns the first element from an array.
    ```javascript
    const arr = [1, 2, 3];
    const first = arr.shift();
    console.log(first);   // Output: 1
    console.log(arr);     // Output: [2, 3]
    ```

32. ** `slice()` **: Returns a shallow copy of a portion of an array into a new array.
    ```javascript
    const arr = [1, 2, 3, 4];
    const sliced = arr.slice(1, 3);
    console.log(sliced);   // Output: [2, 3]
    ```

33. ** `some()` **: Tests if at least one element in the array passes a provided function's test.
    ```javascript
    const arr = [1, 2, 3];
    const hasEven = arr.some(num => num % 2 === 0);
    console.log(hasEven);   // Output: true
    ```

34. ** `sort()` **: Sorts the elements of an array in place and returns the array.
    ```javascript
    const arr = [3, 1, 4, 2];
    arr.sort();
    console.log(arr);   // Output: [1, 2, 3, 4]
    ```

35. ** `splice()` **: Changes the contents of an array by removing or replacing existing elements and / or adding new elements.
    ```javascript
    const arr = [1, 2, 3, 4];
    arr.splice(1, 2, 'a', 'b');
    console.log(arr);   // Output: [1, 'a', 'b', 4]
    ```

36. ** `toLocaleString()` **: Returns a string representing the elements of the array using locale-specific conventions.
    ```javascript
    const arr = [1000, 2000, 3000];
    const localeStr = arr.toLocaleString('en-US');
    console.log(localeStr);   // Output: '1,000,2,000,3,000'
    ```

37. ** `toString()` **: Returns a string representing the elements of the array.
    ```javascript
    const arr = [1, 2, 3];
    const str = arr.toString();
    console.log(str);   // Output: '1,2,3'
    ```

38. ** `unshift()` **: Adds one or more elements to the beginning of an array and returns the new length.
    ```javascript
    const arr = [2, 3];
    const newLength = arr.unshift(1);
    console.log(newLength);   // Output: 3
    console.log(arr);         // Output: [1, 2, 3]
    ```

39. ** `values()` **: Returns an iterator containing the values for each index in the array.
    ```javascript
    const arr = ['a', 'b', 'c'];
    const valuesIterator = arr.values();
    for (const value of valuesIterator) {
        console.log(value);
    }
    // Output:
    // 'a'
    // 'b'
    // 'c'
    ```

40. ** `with()` **: Returns a new array with an element at a specified index replaced with a new value(part of the ECMAScript proposal).
    ```javascript
    const arr = [1, 2, 3];
    const newArr = arr.with(1, 10);
    console.log(newArr);   // Output: [1, 10, 3]
    ```

These examples cover the usage of each array method.Let me know if you need further explanations or additional examples!